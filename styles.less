@hitbox-size: 50px;
@game-height: 400px;
@game-length-easy: 45s;
@game-length-med: 30s;
@game-length-hard: 20s;

body, html {
  height: 100%;
  font-family: Arial, Helvetica, sans-serif;
}
* {
  box-sizing: border-box;
}

.maxStreakBoard {
  position: absolute;
  top: 240px;
  right: 95px;
}

.app {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.startScreen, .gameOverScreen {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  position: absolute;
  width: 100%;
}

input[type="reset"] {
  background: none;
  color: inherit;
  width: initial;
  // We explicitly do not touch border and padding to make it easier to override them
  // border: none;
  // padding: 0;
  font: inherit;
  cursor: pointer;
  outline: inherit;
}
input[type="radio"] {
  display: none;
}

.startScreen, .playingScreen, .gameOverScreen {
  display: none;
}
.gameOverScreen {
  pointer-events: none;
}
.startScreen {
  padding: 10px;
}
#start:checked ~ #game .startScreen {
  display: flex;
}
// #playing:checked ~ #game .playingScreen
#playing-hard:checked {
  .playingMixin(@game-length-hard)
}
#playing-med:checked {
  .playingMixin(@game-length-med)
}
#playing-easy:checked {
  .playingMixin(@game-length-easy)
}

.playingMixin(@game-length) {
  ~ #game .gameOverScreen {
    display: flex;
    opacity: 0;
    animation: show 0.1s linear @game-length forwards;
  }
  ~ #game .playingScreen {
    display: block;
    // wait @game-length time before playing the hide animation
    animation: hide 0.1s linear @game-length forwards;

    .level {
      animation: playing @game-length linear;
    }

    .maxStreakBoard {
      animation: hide 0.1s linear @game-length reverse both;
    }
  }
}


#game {
  border: 1px solid black;
  min-height: 400px;
  min-width: 300px;
  background-color: goldenrod;
  border-radius: 4px;
  position: relative;
  overflow: hidden;
  counter-reset: score streak;
}

.playingScreen {
  .scoreBoard::after {
    display: block;
    content: "Score: " counter(score);
    position: absolute;
    top: 10px;
    left: 10px;
  }
  .streakBoard::after {
    display: block;
    content: "Streak: " counter(streak) "x";
    position: absolute;
    top: 10px;
    right: 30px;
  }
  .hitbox {
    -moz-appearance: none;
    -webkit-appearance: none;
    -webkit-touch-callout: none;
    -moz-user-select: none;
    user-select: none;
    outline: none;
    height: @hitbox-size;
    width: @hitbox-size;
    position: absolute;
    /* Icon from: https://material.io/tools/icons/?search=note&icon=music_note&style=baseline */
    background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" focusable="false" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"/><path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z"/></svg>');
    background-size: contain;

    &:checked {
      counter-increment: score;
      pointer-events: none;
      animation: hitAnim 0.3s;
    }
  }
}

.level .hitbox:first-of-type:checked,
.hitbox:not(:checked) + .hitbox:checked {
  counter-reset: streak;
  counter-increment: score streak;
}
.hitbox:checked + .hitbox:checked {
  counter-increment: score streak;
}


.gameOverScreen {
  #game-over-score::after {
    display: block;
    content: "Score: " counter(score);
  }
  #game-over-streak::after {
    display: block;
    content: "Final Streak: " counter(streak) "x";
    margin-top: -5px;
    margin-bottom: 40px;
  }
}

.clickGuard {
  background-color: transparent;
  position: absolute;
  height: calc(@game-height - @hitbox-size);
  width: 100%;
  z-index: 100;
}


.col1 {
  left: 30px;
}
.col2 {
  left: 90px;
}
.col3 {
  left: 150px;
}
.col4 {
  left: 210px;
}

.hitboxIndicator {
  height: @hitbox-size;
  width: @hitbox-size;

  position: absolute;
  outline: 1px solid;
  bottom: 5px;
  pointer-events: none;
}

.playButton {
  padding: 5px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-bottom: 10px;
  width: 80px;
  text-align: center;
  pointer-events: all;

  &:hover {
    animation: menuHover 0.3s forwards;
  }
}
@keyframes playing {
  0%   { transform: translateY(-100px); }
  100% { transform: translateY(9000px); }
}


@keyframes hitAnim {
  0% { transform: translateY(0) scale(1); opacity: 1; }
  100% { transform: translateY(-100px) scale(2); opacity: 0.3; }
}

@keyframes hide {
  0% { color: rgba(0, 0, 0, 1) }
  // Very hacky, but this lets us click through the clickGuard when gameOver
  100% { color: rgba(0, 0, 0, 0); pointer-events: none; }
}

@keyframes show {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes menuHover {
  0% { transform: scale(1); }
  100% { transform: scale(1.25); }
}
